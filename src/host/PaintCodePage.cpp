
/* Generated by tools/paintcode.py from a PaintCode JavaScript source. */

#include "PaintCodePage.h"



void PaintCodePage::drawScalar2(PaintCodeContext& context, PCRect frame, String unitText, double value, double noValueValue, String noValueText, double lowThresholdValue, double highThresholdValue, bool isNoValueLow) {
  
  auto colorNormalValue = "rgba(255, 255, 255, 1)";
  auto colorHighValue = "rgba(0, 185, 0, 1)";
  auto colorLowValue = "rgba(185, 0, 0, 1)";

  //// Variable Declarations
  auto singleDigitFractionString = (String() + round(floor(round(value * 10) / 10))) + "." + round(round(value * 10) % 10);
  auto hasValue = value != noValueValue;
  auto valueText = hasValue ? singleDigitFractionString : noValueText;
  auto valueColor = !hasValue && isNoValueLow ? colorLowValue : (!hasValue && !isNoValueLow ? colorNormalValue : (value < lowThresholdValue ? colorLowValue : (value > highThresholdValue ? colorHighValue : colorNormalValue)));

  //// Text 2 Drawing
  auto text2Rect = makeRect(frame.x + frame.w - 16, frame.y + 31, 13, 17);
  context.fillStyle = "rgb(255, 255, 255)";
  context.font = FontHelveticaNeue_14;
  context.textAlign = GC::TextAlignRight;
  auto text2TotalHeight = 14 * 1.3;
  context.fillText(unitText, text2Rect.x + text2Rect.w, text2Rect.y + 13 + text2Rect.h / 2 - text2TotalHeight / 2);


  //// Text 3 Drawing
  auto text3Rect = makeRect(frame.x + 8, frame.y + frame.h - 43, frame.w - 22, 37);
  context.fillStyle = valueColor;
  context.font = FontHelveticaNeue_40;
  context.textAlign = GC::TextAlignRight;
  auto text3TotalHeight = 40 * 1.3;
  context.fillText(valueText, text3Rect.x + text3Rect.w, text3Rect.y + 38 + text3Rect.h / 2 - text3TotalHeight / 2);
}

void PaintCodePage::drawScale2(PaintCodeContext& context, double value, double noValueValue, double lowThresholdValue, double highThresholdValue, bool isNoValueLow, double scaleLowValue, String scaleLowValueCustomText, double scaleHighValue, String scaleHighValueCustomText, double scaleWidthValue, PCRect targetFrame, String resizing) {
  
  auto colorHighValue = "rgba(0, 185, 0, 1)";
  auto colorLowValue = "rgba(185, 0, 0, 1)";
  auto colorKey = "rgba(255, 255, 255, 1)";
  auto colorNone = "rgba(255, 255, 255, 0)";

  //// Variable Declarations
  auto hasValue = value != noValueValue;
  auto fillColor = !hasValue && isNoValueLow ? colorLowValue : (!hasValue && !isNoValueLow ? colorNone : (value < lowThresholdValue ? colorLowValue : (value > highThresholdValue ? colorHighValue : colorNone)));
  auto scaleLowValueSingleDigit = (String() + round(floor(round(scaleLowValue * 10) / 10))) + "." + round(round(scaleLowValue * 10) % 10);
  auto scaleLowValueText = scaleLowValueCustomText != String() ? scaleLowValueCustomText : scaleLowValueSingleDigit;
  auto scaleHighValueSingleDigit = (String() + round(floor(round(scaleHighValue * 10) / 10))) + "." + round(round(scaleHighValue * 10) % 10);
  auto scaleNeedleFraction = (value - scaleLowValue) / (scaleHighValue - scaleLowValue);
  auto scaleNeedleFractionClamped = scaleNeedleFraction < 0 ? 0 : (scaleNeedleFraction > 1 ? 1 : scaleNeedleFraction);
  auto scaleHighValueText = scaleHighValueCustomText != String() ? scaleHighValueCustomText : scaleHighValueSingleDigit;
  auto scaleNeedleX = floor(16 + scaleWidthValue * scaleNeedleFractionClamped);

  //// Text 2 Drawing
  auto text2Rect = makeRect(0, 31, 30, 17);
  context.fillStyle = colorKey;
  context.font = FontHelveticaNeue_14;
  context.textAlign = GC::TextAlignLeft;
  auto text2TotalHeight = 14 * 1.3;
  context.fillText(scaleLowValueText, text2Rect.x, text2Rect.y + 13 + text2Rect.h / 2 - text2TotalHeight / 2);


  //// Text 3 Drawing
  auto text3Rect = makeRect(129, 31, 30, 17);
  context.fillStyle = colorKey;
  context.font = FontHelveticaNeue_14;
  context.textAlign = GC::TextAlignRight;
  auto text3TotalHeight = 14 * 1.3;
  context.fillText(scaleHighValueText, text3Rect.x + text3Rect.w, text3Rect.y + 13 + text3Rect.h / 2 - text3TotalHeight / 2);


  //// Rectangle Drawing
  context.beginPath();
  context.rect(2.5, 16.5, 156, 10);
  context.fillStyle = fillColor;
  context.fill();
  context.strokeStyle = colorKey;
  context.lineWidth = 1;
  context.stroke();


  if (hasValue)
  {
//// Rectangle 2 Drawing
context.beginPath();
context.rect(scaleNeedleX, 13, 4, 17);
context.fillStyle = colorKey;
context.fill();
  }
  
  context.restore();

}

void PaintCodePage::drawBatteryScreen3(PaintCodeContext& context, double houseVoltageValue, double houseCurrentValue, double engineVoltageValue, double solarVoltageValue, PCRect targetFrame, String resizing) {
  
  auto colorKey = "rgba(255, 255, 255, 1)";

  //// Variable Declarations
  auto houseCurrentAbsValue = abs(houseCurrentValue);
  auto houseIsCharging = houseCurrentValue > 0;
  auto houseLowThresholdHackForRedValue = houseIsCharging ? 0 : 1000;

  //// Symbol 5 Drawing
  auto symbol5Rect = makeRect(11, 55, 100, 55);
  context.save();
  context.beginPath();
  context.rect(symbol5Rect.x, symbol5Rect.y, symbol5Rect.w, symbol5Rect.h);
  context.clip();
  context.translate(symbol5Rect.x, symbol5Rect.y);

  this->drawScalar2(context, makeRect(0, 0, symbol5Rect.w, symbol5Rect.h), "A", houseCurrentAbsValue, 0, "â€”", houseLowThresholdHackForRedValue, 0, false);
  context.restore();


  //// Symbol 2 Drawing
  auto symbol2Rect = makeRect(11, 16, 100, 55);
  context.save();
  context.beginPath();
  context.rect(symbol2Rect.x, symbol2Rect.y, symbol2Rect.w, symbol2Rect.h);
  context.clip();
  context.translate(symbol2Rect.x, symbol2Rect.y);

  this->drawScalar2(context, makeRect(0, 0, symbol2Rect.w, symbol2Rect.h), "V", houseVoltageValue, 0, "N/A", 11, 13, false);
  context.restore();


  //// Text 2 Drawing
  auto text2Rect = makeRect(38, 10, 57, 17);
  context.fillStyle = "rgb(255, 255, 255)";
  context.font = FontHelveticaNeue_14;
  context.textAlign = GC::TextAlignRight;
  auto text2TotalHeight = 14 * 1.3;
  context.fillText("House", text2Rect.x + text2Rect.w, text2Rect.y + 13 + text2Rect.h / 2 - text2TotalHeight / 2);


  //// Symbol 3 Drawing
  auto symbol3Rect = makeRect(11, 119, 100, 55);
  context.save();
  context.beginPath();
  context.rect(symbol3Rect.x, symbol3Rect.y, symbol3Rect.w, symbol3Rect.h);
  context.clip();
  context.translate(symbol3Rect.x, symbol3Rect.y);

  this->drawScalar2(context, makeRect(0, 0, symbol3Rect.w, symbol3Rect.h), "V", engineVoltageValue, 0, "N/A", 11, 13, false);
  context.restore();


  //// Text 3 Drawing
  auto text3Rect = makeRect(38, 111, 57, 17);
  context.fillStyle = "rgb(255, 255, 255)";
  context.font = FontHelveticaNeue_14;
  context.textAlign = GC::TextAlignRight;
  auto text3TotalHeight = 14 * 1.3;
  context.fillText("Engine", text3Rect.x + text3Rect.w, text3Rect.y + 13 + text3Rect.h / 2 - text3TotalHeight / 2);


  //// Symbol 4 Drawing
  auto symbol4Rect = makeRect(11, 185, 100, 55);
  context.save();
  context.beginPath();
  context.rect(symbol4Rect.x, symbol4Rect.y, symbol4Rect.w, symbol4Rect.h);
  context.clip();
  context.translate(symbol4Rect.x, symbol4Rect.y);

  this->drawScalar2(context, makeRect(0, 0, symbol4Rect.w, symbol4Rect.h), "V", solarVoltageValue, 0, "N/A", 11, 13, false);
  context.restore();


  //// Text 4 Drawing
  auto text4Rect = makeRect(38, 179, 57, 17);
  context.fillStyle = "rgb(255, 255, 255)";
  context.font = FontHelveticaNeue_14;
  context.textAlign = GC::TextAlignRight;
  auto text4TotalHeight = 14 * 1.3;
  context.fillText("Solar", text4Rect.x + text4Rect.w, text4Rect.y + 13 + text4Rect.h / 2 - text4TotalHeight / 2);


  //// Symbol 6 Drawing
  auto symbol6Rect = makeRect(129, 16, 160, 55);
  context.save();
  context.beginPath();
  context.rect(symbol6Rect.x, symbol6Rect.y, symbol6Rect.w, symbol6Rect.h);
  context.clip();
  context.translate(symbol6Rect.x, symbol6Rect.y);

  this->drawScale2(context, houseVoltageValue, 0, 11, 13.5, false, 10, "10", 16, "16", 115, makeRect(0, 0, symbol6Rect.w, symbol6Rect.h), "stretch");
  context.restore();


  //// Symbol 9 Drawing
  auto symbol9Rect = makeRect(129, 55, 160, 55);
  context.save();
  context.beginPath();
  context.rect(symbol9Rect.x, symbol9Rect.y, symbol9Rect.w, symbol9Rect.h);
  context.clip();
  context.translate(symbol9Rect.x, symbol9Rect.y);

  this->drawScale2(context, houseCurrentValue, 0, 0, 13.5, false, -20, "-20", 20, "20", 115, makeRect(0, 0, symbol9Rect.w, symbol9Rect.h), "stretch");
  context.restore();


  //// Symbol Drawing
  auto symbolRect = makeRect(129, 119, 160, 55);
  context.save();
  context.beginPath();
  context.rect(symbolRect.x, symbolRect.y, symbolRect.w, symbolRect.h);
  context.clip();
  context.translate(symbolRect.x, symbolRect.y);

  this->drawScale2(context, engineVoltageValue, 0, 11, 13.5, false, 10, "10", 16, "16", 115, makeRect(0, 0, symbolRect.w, symbolRect.h), "stretch");
  context.restore();


  //// Symbol 7 Drawing
  auto symbol7Rect = makeRect(129, 185, 160, 55);
  context.save();
  context.beginPath();
  context.rect(symbol7Rect.x, symbol7Rect.y, symbol7Rect.w, symbol7Rect.h);
  context.clip();
  context.translate(symbol7Rect.x, symbol7Rect.y);

  this->drawScale2(context, solarVoltageValue, 0, 11, 13.5, false, 10, "10", 16, "16", 115, makeRect(0, 0, symbol7Rect.w, symbol7Rect.h), "stretch");
  context.restore();


  //// Text Drawing
  auto textRect = makeRect(201, 86, 16, 17);
  context.fillStyle = "rgb(255, 255, 255)";
  context.font = FontHelveticaNeue_14;
  context.textAlign = GC::TextAlignCenter;
  auto textTotalHeight = 14 * 1.3;
  context.fillText("0", textRect.x + textRect.w/2, textRect.y + 13 + textRect.h / 2 - textTotalHeight / 2);


  //// Bezier Drawing
  context.beginPath();
  context.moveTo(209.5, 67.5);
  context.lineTo(209.5, 85.5);
  context.strokeStyle = colorKey;
  context.lineWidth = 1;
  context.stroke();
  
  context.restore();

}


