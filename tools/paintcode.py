import argparse
import re

headerTemplate = """
/* Generated by tools/paintcode.py from a PaintCode JavaScript source. */

#include "CLASSNAME.h"

"""

def convert(jsfile, classname):
    text = jsfile.read()

    # Replace header
    header = headerTemplate.replace("CLASSNAME", classname)
    text = re.sub('.*/// Drawing Methods', header, text, flags=re.DOTALL)

    # Replace footer
    text = re.sub('//// Infrastructure.*', '', text, flags = re.DOTALL)

    # Replace var by auto
    text = re.sub('var ', 'auto ', text)

    # Replace single-quote strings by double-quote strings
    pattern = re.compile("'(.*?)'")
    match = re.search(pattern, text)
    while match:
        string = match.group(1).replace('"', '\\"')
        text = text.replace(match.group(0), '"' + string + '"')
        match = re.search(pattern, text)

    # Search all function declarations and rewrite them in C++
    pattern = re.compile('function (.*)\((.*?)\) {')
    match = re.search(pattern, text)
    while match:
        declaration = "void " + classname + "::" + match.group(1) + "("
        first = True
        for arg in match.group(2).split(", "):
            argType = "FIXME"
            if arg.startswith("is"):
                argType = "bool"
            elif arg.endswith("Value") or arg == "value":
                argType = "double"
            elif arg.endswith("Text"):
                argType = "String"
            elif arg == "canvas":
                argType = "PaintCodeContext&"
                arg = "context"
            elif arg == "targetFrame":
                argType = "PCRect"
            elif arg == "resizing":
                argType = "String"
            elif arg == "frame":
                argType = "PCRect"
            else:
                print("WARNING: Unknown type for argument {}".format(arg))
                argType = "FIXME"

            if argType is not None:
                if not first:
                    declaration = declaration + ", "
                else:
                    first = False
                declaration = declaration + argType + " " + arg

        declaration = declaration + ") {\n  //// REMOVEMEBLOCK"
        text = text.replace(match.group(0), declaration)
        match = re.search(pattern, text)

    text = re.sub('//// REMOVEMEBLOCK.*?//// Color Declarations', '', text, flags = re.DOTALL)

    # Replace call to ourselves
    text = text.replace(" " + classname + ".", " this->")
    ## temp
    text = text.replace("KBoxDrawKit.", "this->")

    # FIXME DISGUSTING
    text = text.replace("canvas", "context")

    # Replace Math calls to proper C functions
    text = text.replace("Math.abs(", "abs(")
    text = text.replace("Math.round(", "round(")
    text = text.replace("Math.ceil(", "ceil(")
    text = text.replace("Math.floor(", "floor(")

    # Fix JS things
    text = text.replace("!==", "!=")
    text = text.replace("===", "==")

    # Find fonts
    pattern = re.compile("font\s+=\s\"(\d+)px (\w+).*\"");
    match = re.search(pattern, text);
    while match:
        fontDefine = match.group(2).upper() + "_" + match.group(1)
        text = text.replace(match.group(0), "font = " + fontDefine)
        match = re.search(pattern, text)


    # Try to fix the indentation
    text = re.sub(r'^' + ' ' * 12, ' ' * 4, text, flags = re.MULTILINE)
    text = re.sub(r'^' + ' ' * 8, ' ' * 2, text, flags = re.MULTILINE)
    text = re.sub(r'^' + ' ' * 4, '', text, flags = re.MULTILINE)

    # Find lone "" strings and force them to be strings
    text = text.replace('""', "String()")

    print text

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("jsfile", type = argparse.FileType('r'))
    parser.add_argument("classname")
    args = parser.parse_args()

    convert(args.jsfile, args.classname)


if __name__ == '__main__':
    main()


